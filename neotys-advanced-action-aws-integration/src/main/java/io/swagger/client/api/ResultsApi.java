/*
 * NeoLoad API
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.ArrayOfTestDefinition;
import io.swagger.client.model.CounterDefinition;
import io.swagger.client.model.CounterValues;
import io.swagger.client.model.ElementDefinitions;
import io.swagger.client.model.ElementValues;
import io.swagger.client.model.Points;
import io.swagger.client.model.TestDefinition;
import io.swagger.client.model.TestStatistics;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ResultsApi {
    private ApiClient apiClient;

    public ResultsApi() {
        this(Configuration.getDefaultApiClient());
    }
    
    public ResultsApi(String basePath, String token) {
        this(Configuration.getDefaultApiClient());
    	apiClient.setBasePath(basePath);
    	apiClient.addDefaultHeader("", token);
    }

    public ResultsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for getTest
     * @param testId Unique identifier representing a specific test. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestValidateBeforeCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTest(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestCall(testId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result description
     * Provide a test result description using a unique test identifier. Provide name, dates, owner ...
     * @param testId Unique identifier representing a specific test. (required)
     * @return TestDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestDefinition getTest(String testId) throws ApiException {
        ApiResponse<TestDefinition> resp = getTestWithHttpInfo(testId);
        return resp.getData();
    }

    /**
     * Test result description
     * Provide a test result description using a unique test identifier. Provide name, dates, owner ...
     * @param testId Unique identifier representing a specific test. (required)
     * @return ApiResponse&lt;TestDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestDefinition> getTestWithHttpInfo(String testId) throws ApiException {
        com.squareup.okhttp.Call call = getTestValidateBeforeCall(testId, null, null);
        Type localVarReturnType = new TypeToken<TestDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result description (asynchronously)
     * Provide a test result description using a unique test identifier. Provide name, dates, owner ...
     * @param testId Unique identifier representing a specific test. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestAsync(String testId, final ApiCallback<TestDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestValidateBeforeCall(testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElements
     * @param testId Unique identifier representing a specific test. (required)
     * @param category Category of the elements to return. Available categories are: TRANSACTION, PAGE, REQUEST. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsCall(String testId, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/elements"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (category != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "category", category));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestElementsValidateBeforeCall(String testId, String category, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestElements(Async)");
        }
        
        // verify the required parameter 'category' is set
        if (category == null) {
            throw new ApiException("Missing the required parameter 'category' when calling getTestElements(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestElementsCall(testId, category, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test elements
     * Provide the tests elements of a test result. The elements type must be provided.
     * @param testId Unique identifier representing a specific test. (required)
     * @param category Category of the elements to return. Available categories are: TRANSACTION, PAGE, REQUEST. (required)
     * @return ElementDefinitions
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElementDefinitions getTestElements(String testId, String category) throws ApiException {
        ApiResponse<ElementDefinitions> resp = getTestElementsWithHttpInfo(testId, category);
        return resp.getData();
    }

    /**
     * Test elements
     * Provide the tests elements of a test result. The elements type must be provided.
     * @param testId Unique identifier representing a specific test. (required)
     * @param category Category of the elements to return. Available categories are: TRANSACTION, PAGE, REQUEST. (required)
     * @return ApiResponse&lt;ElementDefinitions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElementDefinitions> getTestElementsWithHttpInfo(String testId, String category) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsValidateBeforeCall(testId, category, null, null);
        Type localVarReturnType = new TypeToken<ElementDefinitions>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test elements (asynchronously)
     * Provide the tests elements of a test result. The elements type must be provided.
     * @param testId Unique identifier representing a specific test. (required)
     * @param category Category of the elements to return. Available categories are: TRANSACTION, PAGE, REQUEST. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsAsync(String testId, String category, final ApiCallback<ElementDefinitions> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsValidateBeforeCall(testId, category, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElementDefinitions>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElementsPoints
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma separated list of statistics to get. Available statistics are: AVG_DURATION, MIN_DURATION, MAX_DURATION, COUNT, THROUGHPUT, ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE, AVG_TTFB, MIN_TTFB, MAX_TTFB (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsPointsCall(String testId, String elementId, String statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/elements/{elementId}/points"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (statistics != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "statistics", statistics));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestElementsPointsValidateBeforeCall(String testId, String elementId, String statistics, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestElementsPoints(Async)");
        }
        
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestElementsPoints(Async)");
        }
        
        // verify the required parameter 'statistics' is set
        if (statistics == null) {
            throw new ApiException("Missing the required parameter 'statistics' when calling getTestElementsPoints(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestElementsPointsCall(testId, elementId, statistics, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test elements points since the beginning of the test
     * Provide all the ponits of a test element for the selected statistics.
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma separated list of statistics to get. Available statistics are: AVG_DURATION, MIN_DURATION, MAX_DURATION, COUNT, THROUGHPUT, ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE, AVG_TTFB, MIN_TTFB, MAX_TTFB (required)
     * @return Points
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public Points getTestElementsPoints(String testId, String elementId, String statistics) throws ApiException {
        ApiResponse<Points> resp = getTestElementsPointsWithHttpInfo(testId, elementId, statistics);
        return resp.getData();
    }

    /**
     * Test elements points since the beginning of the test
     * Provide all the ponits of a test element for the selected statistics.
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma separated list of statistics to get. Available statistics are: AVG_DURATION, MIN_DURATION, MAX_DURATION, COUNT, THROUGHPUT, ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE, AVG_TTFB, MIN_TTFB, MAX_TTFB (required)
     * @return ApiResponse&lt;Points&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Points> getTestElementsPointsWithHttpInfo(String testId, String elementId, String statistics) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsPointsValidateBeforeCall(testId, elementId, statistics, null, null);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test elements points since the beginning of the test (asynchronously)
     * Provide all the ponits of a test element for the selected statistics.
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param statistics Comma separated list of statistics to get. Available statistics are: AVG_DURATION, MIN_DURATION, MAX_DURATION, COUNT, THROUGHPUT, ELEMENTS_PER_SECOND, ERRORS, ERRORS_PER_SECOND, ERROR_RATE, AVG_TTFB, MIN_TTFB, MAX_TTFB (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsPointsAsync(String testId, String elementId, String statistics, final ApiCallback<Points> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsPointsValidateBeforeCall(testId, elementId, statistics, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<Points>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestElementsValues
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestElementsValuesCall(String testId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/elements/{elementId}/values"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()))
            .replaceAll("\\{" + "elementId" + "\\}", apiClient.escapeString(elementId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestElementsValuesValidateBeforeCall(String testId, String elementId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestElementsValues(Async)");
        }
        
        // verify the required parameter 'elementId' is set
        if (elementId == null) {
            throw new ApiException("Missing the required parameter 'elementId' when calling getTestElementsValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestElementsValuesCall(testId, elementId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test elements values
     * Provide the values of a test element.
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ElementValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ElementValues getTestElementsValues(String testId, String elementId) throws ApiException {
        ApiResponse<ElementValues> resp = getTestElementsValuesWithHttpInfo(testId, elementId);
        return resp.getData();
    }

    /**
     * Test elements values
     * Provide the values of a test element.
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @return ApiResponse&lt;ElementValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ElementValues> getTestElementsValuesWithHttpInfo(String testId, String elementId) throws ApiException {
        com.squareup.okhttp.Call call = getTestElementsValuesValidateBeforeCall(testId, elementId, null, null);
        Type localVarReturnType = new TypeToken<ElementValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test elements values (asynchronously)
     * Provide the values of a test element.
     * @param testId Unique identifier representing a specific test. (required)
     * @param elementId Unique identifier representing a specific element. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestElementsValuesAsync(String testId, String elementId, final ApiCallback<ElementValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestElementsValuesValidateBeforeCall(testId, elementId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ElementValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestMonitors
     * @param testId Unique identifier representing a specific test. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/monitors"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestMonitorsValidateBeforeCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestMonitors(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestMonitorsCall(testId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test monitors
     * Provide all the tests counters of all monitors for a test result.
     * @param testId Unique identifier representing a specific test. (required)
     * @return CounterDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterDefinition getTestMonitors(String testId) throws ApiException {
        ApiResponse<CounterDefinition> resp = getTestMonitorsWithHttpInfo(testId);
        return resp.getData();
    }

    /**
     * Test monitors
     * Provide all the tests counters of all monitors for a test result.
     * @param testId Unique identifier representing a specific test. (required)
     * @return ApiResponse&lt;CounterDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterDefinition> getTestMonitorsWithHttpInfo(String testId) throws ApiException {
        com.squareup.okhttp.Call call = getTestMonitorsValidateBeforeCall(testId, null, null);
        Type localVarReturnType = new TypeToken<CounterDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test monitors (asynchronously)
     * Provide all the tests counters of all monitors for a test result.
     * @param testId Unique identifier representing a specific test. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsAsync(String testId, final ApiCallback<CounterDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestMonitorsValidateBeforeCall(testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestMonitorsValues
     * @param testId Unique identifier representing a specific test. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsValuesCall(String testId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/monitors/{counterId}/values"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()))
            .replaceAll("\\{" + "counterId" + "\\}", apiClient.escapeString(counterId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestMonitorsValuesValidateBeforeCall(String testId, String counterId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestMonitorsValues(Async)");
        }
        
        // verify the required parameter 'counterId' is set
        if (counterId == null) {
            throw new ApiException("Missing the required parameter 'counterId' when calling getTestMonitorsValues(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestMonitorsValuesCall(testId, counterId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test monitors values
     * Provide the values of a test counter.
     * @param testId Unique identifier representing a specific test. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return CounterValues
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CounterValues getTestMonitorsValues(String testId, String counterId) throws ApiException {
        ApiResponse<CounterValues> resp = getTestMonitorsValuesWithHttpInfo(testId, counterId);
        return resp.getData();
    }

    /**
     * Test monitors values
     * Provide the values of a test counter.
     * @param testId Unique identifier representing a specific test. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @return ApiResponse&lt;CounterValues&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CounterValues> getTestMonitorsValuesWithHttpInfo(String testId, String counterId) throws ApiException {
        com.squareup.okhttp.Call call = getTestMonitorsValuesValidateBeforeCall(testId, counterId, null, null);
        Type localVarReturnType = new TypeToken<CounterValues>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test monitors values (asynchronously)
     * Provide the values of a test counter.
     * @param testId Unique identifier representing a specific test. (required)
     * @param counterId Unique identifier representing a specific counter. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestMonitorsValuesAsync(String testId, String counterId, final ApiCallback<CounterValues> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestMonitorsValuesValidateBeforeCall(testId, counterId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CounterValues>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTestStatistics
     * @param testId Unique identifier representing a specific test. (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestStatisticsCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests/{testId}/statistics"
            .replaceAll("\\{" + "testId" + "\\}", apiClient.escapeString(testId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestStatisticsValidateBeforeCall(String testId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'testId' is set
        if (testId == null) {
            throw new ApiException("Missing the required parameter 'testId' when calling getTestStatistics(Async)");
        }
        
        
        com.squareup.okhttp.Call call = getTestStatisticsCall(testId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * Test result main statistics
     * Provide the main statistics of a test result. For a runnning test, these statistics are live, for a finished test, those are average for the all test.
     * @param testId Unique identifier representing a specific test. (required)
     * @return TestStatistics
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public TestStatistics getTestStatistics(String testId) throws ApiException {
        ApiResponse<TestStatistics> resp = getTestStatisticsWithHttpInfo(testId);
        return resp.getData();
    }

    /**
     * Test result main statistics
     * Provide the main statistics of a test result. For a runnning test, these statistics are live, for a finished test, those are average for the all test.
     * @param testId Unique identifier representing a specific test. (required)
     * @return ApiResponse&lt;TestStatistics&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<TestStatistics> getTestStatisticsWithHttpInfo(String testId) throws ApiException {
        com.squareup.okhttp.Call call = getTestStatisticsValidateBeforeCall(testId, null, null);
        Type localVarReturnType = new TypeToken<TestStatistics>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Test result main statistics (asynchronously)
     * Provide the main statistics of a test result. For a runnning test, these statistics are live, for a finished test, those are average for the all test.
     * @param testId Unique identifier representing a specific test. (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestStatisticsAsync(String testId, final ApiCallback<TestStatistics> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestStatisticsValidateBeforeCall(testId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<TestStatistics>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getTests
     * @param status Return only the test with the specified status. Available status are: STARTING, RUNNING, TERMINATED. (optional)
     * @param project Project name. Return only the tests of the specified project. (optional)
     * @param author The author of the test. Return only the tests launched by the specified author. (optional)
     * @param limit The maximum number of test results returned by this call. (optional, default to 50)
     * @param offset The offset of the first test to return. Starting at this offset the query will return a maximum of &#39;limit&#39; tests. (optional, default to 0)
     * @param fields Comma separated list of fields to include in the json test definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getTestsCall(String status, String project, String author, Integer limit, Integer offset, String fields, Boolean pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/tests";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        if (status != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "status", status));
        if (project != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "project", project));
        if (author != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "author", author));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "limit", limit));
        if (offset != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "offset", offset));
        if (fields != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "fields", fields));
        if (pretty != null)
        localVarQueryParams.addAll(apiClient.parameterToPairs("", "pretty", pretty));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "NeoloadAuthorizer" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    private com.squareup.okhttp.Call getTestsValidateBeforeCall(String status, String project, String author, Integer limit, Integer offset, String fields, Boolean pretty, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        
        com.squareup.okhttp.Call call = getTestsCall(status, project, author, limit, offset, fields, pretty, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * List test results
     * List the test results of the account corresponding to the parameters.
     * @param status Return only the test with the specified status. Available status are: STARTING, RUNNING, TERMINATED. (optional)
     * @param project Project name. Return only the tests of the specified project. (optional)
     * @param author The author of the test. Return only the tests launched by the specified author. (optional)
     * @param limit The maximum number of test results returned by this call. (optional, default to 50)
     * @param offset The offset of the first test to return. Starting at this offset the query will return a maximum of &#39;limit&#39; tests. (optional, default to 0)
     * @param fields Comma separated list of fields to include in the json test definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @return ArrayOfTestDefinition
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ArrayOfTestDefinition getTests(String status, String project, String author, Integer limit, Integer offset, String fields, Boolean pretty) throws ApiException {
        ApiResponse<ArrayOfTestDefinition> resp = getTestsWithHttpInfo(status, project, author, limit, offset, fields, pretty);
        return resp.getData();
    }

    /**
     * List test results
     * List the test results of the account corresponding to the parameters.
     * @param status Return only the test with the specified status. Available status are: STARTING, RUNNING, TERMINATED. (optional)
     * @param project Project name. Return only the tests of the specified project. (optional)
     * @param author The author of the test. Return only the tests launched by the specified author. (optional)
     * @param limit The maximum number of test results returned by this call. (optional, default to 50)
     * @param offset The offset of the first test to return. Starting at this offset the query will return a maximum of &#39;limit&#39; tests. (optional, default to 0)
     * @param fields Comma separated list of fields to include in the json test definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @return ApiResponse&lt;ArrayOfTestDefinition&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<ArrayOfTestDefinition> getTestsWithHttpInfo(String status, String project, String author, Integer limit, Integer offset, String fields, Boolean pretty) throws ApiException {
        com.squareup.okhttp.Call call = getTestsValidateBeforeCall(status, project, author, limit, offset, fields, pretty, null, null);
        Type localVarReturnType = new TypeToken<ArrayOfTestDefinition>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List test results (asynchronously)
     * List the test results of the account corresponding to the parameters.
     * @param status Return only the test with the specified status. Available status are: STARTING, RUNNING, TERMINATED. (optional)
     * @param project Project name. Return only the tests of the specified project. (optional)
     * @param author The author of the test. Return only the tests launched by the specified author. (optional)
     * @param limit The maximum number of test results returned by this call. (optional, default to 50)
     * @param offset The offset of the first test to return. Starting at this offset the query will return a maximum of &#39;limit&#39; tests. (optional, default to 0)
     * @param fields Comma separated list of fields to include in the json test definition. (optional)
     * @param pretty If true the Json returned is human readable. (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getTestsAsync(String status, String project, String author, Integer limit, Integer offset, String fields, Boolean pretty, final ApiCallback<ArrayOfTestDefinition> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getTestsValidateBeforeCall(status, project, author, limit, offset, fields, pretty, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<ArrayOfTestDefinition>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
